package main

import "fmt"

// 最初在一个记事本上只有一个字符 'A' 。你每次可以对这个记事本进行两种操作：
// Copy All (复制全部) : 你可以复制这个记事本中的所有字符(部分的复制是不允许的)。
// Paste (粘贴) : 你可以粘贴你上一次复制的字符。

// 给定一个数字 n 。你需要使用最少的操作次数，在记事本中打印出恰好 n 个 'A'。输出能够打印出 n 个 'A' 的最少操作次数。

// 输入: 3
//输出: 3
//解释:
//最初, 我们只有一个字符 'A'。
//第 1 步, 我们使用 Copy All 操作。
//第 2 步, 我们使用 Paste 操作来获得 'AA'。
//第 3 步, 我们使用 Paste 操作来获得 'AAA'

// 对于质数来说，只能一直使用一开始copy all 的一个A
// 对于合数来说，就可以用卷除法

// 例如30 卷除可以有 3 2 5，也就是CPP CP CPPPP 也就是 3个A 6个A 30个A
//                  5 2 3       CPPPP CP CPP 5个，10个，30个
// 而虽然步骤不同，但总步骤数还是一样的

// 本质上就是分解因数，而质数因为只有1和它本身，所以只能一直1
func main() {
	fmt.Println(minSteps(19))
}

func minSteps(n int) int {
	res := 0
	for i := 2; i <= n; i++ {
		// 质数的话需要到它本身才能进入下一个循环
		for n%i == 0 {
			res += i
			n /= i
		}
	}
	return res
}
